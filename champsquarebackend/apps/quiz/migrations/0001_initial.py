# Generated by Django 2.2 on 2020-07-01 16:55

import champsquarebackend.models.fields.autoslugfield
import ckeditor_uploader.fields
from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('question', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=128, unique=True, verbose_name='Name')),
                ('description', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='Description')),
                ('image', models.ImageField(blank=True, null=True, upload_to='categories', verbose_name='Image')),
                ('slug', champsquarebackend.models.fields.autoslugfield.AutoSlugField(blank=True, editable=False, max_length=128, populate_from='name', unique=True, verbose_name='Slug')),
                ('is_public', models.BooleanField(db_index=True, default=False, verbose_name='Is Public')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True, verbose_name='used to store metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='datetime when model is created')),
                ('update_at', models.DateTimeField(auto_now=True, verbose_name='datetime when model is updated last time')),
                ('name', models.CharField(max_length=128, verbose_name='name')),
                ('slug', champsquarebackend.models.fields.autoslugfield.AutoSlugField(blank=True, editable=False, max_length=128, populate_from='name', unique=True, verbose_name='slug')),
                ('start_date_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Start date-time of quiz')),
                ('end_date_time', models.DateTimeField(blank=True, null=True, verbose_name='End date-time of quiz')),
                ('duration', models.PositiveIntegerField(default=60, verbose_name='Duration of quiz')),
                ('total_marks', models.FloatField(default=0.0)),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('instructions', ckeditor_uploader.fields.RichTextUploadingField(blank=True, verbose_name='instructions of quiz')),
                ('is_published', models.BooleanField(default=False, verbose_name='Publish')),
                ('is_public', models.BooleanField(default=False, verbose_name='Public')),
                ('multiple_attempts_allowed', models.BooleanField(default=False)),
                ('view_answerpaper', models.BooleanField(default=False)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_category', to='quiz.Category')),
                ('users', models.ManyToManyField(help_text='User which will be allowed to take test', to=settings.AUTH_USER_MODEL, verbose_name='Users')),
            ],
            options={
                'verbose_name': 'Quiz',
                'verbose_name_plural': 'Quizzes',
                'ordering': ['id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestionPaper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True, verbose_name='used to store metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='datetime when model is created')),
                ('update_at', models.DateTimeField(auto_now=True, verbose_name='datetime when model is updated last time')),
                ('shuffle_questions', models.BooleanField(default=False)),
                ('total_questions', models.IntegerField(default=0)),
                ('questions', models.ManyToManyField(related_name='questions', to='question.Question', verbose_name='Questions')),
                ('quiz', models.OneToOneField(blank=True, help_text='Quiz to which this question paper belongs', null=True, on_delete=django.db.models.deletion.PROTECT, to='quiz.Quiz', verbose_name='Quiz')),
            ],
            options={
                'verbose_name': 'QuestionPaper',
                'verbose_name_plural': 'QuestionPapers',
                'ordering': ['id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AnswerPaper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True, verbose_name='used to store metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='datetime when model is created')),
                ('update_at', models.DateTimeField(auto_now=True, verbose_name='datetime when model is updated last time')),
                ('attempt_number', models.IntegerField(verbose_name='Attempt number')),
                ('start_time', models.DateTimeField(verbose_name='Start time of paper')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='End time of paper')),
                ('last_active_time', models.DateTimeField(verbose_name='last active time of user')),
                ('user_ip', models.GenericIPAddressField(verbose_name='IP address of user')),
                ('question_paper', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='quiz.QuestionPaper')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='quiz.Quiz')),
                ('users', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'AnswerPaper',
                'verbose_name_plural': 'AnswerPapers',
                'ordering': ['id'],
                'abstract': False,
            },
        ),
    ]
