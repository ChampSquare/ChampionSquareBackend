# Generated by Django 2.2 on 2020-06-22 03:01

import ckeditor_uploader.fields
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
from django.utils.timezone import utc
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('Unicorn', '0001_initial'),
        ('taggit', '0003_taggeditem_add_unique_index'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(blank=True, max_length=10, null=True)),
                ('error', models.TextField(blank=True, null=True)),
                ('marks', models.FloatField(default=0.0)),
                ('correct', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('0', 'Not Visited'), ('1', 'Not Answered'), ('2', 'Answered'), ('3', 'Marked For Review'), ('4', 'Answered And Marked For Review')], default='0', max_length=2)),
                ('time_spent', models.IntegerField(blank=True, default=0, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AnswerPaper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attempt_number', models.IntegerField()),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('user_ip', models.CharField(max_length=15)),
                ('marks_obtained', models.FloatField(default=0.0, null=True)),
                ('percent', models.FloatField(default=0.0, null=True)),
                ('instruction_read', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('inprogress', 'Inprogress'), ('completed', 'Completed')], default='inprogress', max_length=20)),
                ('answers', models.ManyToManyField(to='Uscholar.Answer')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', ckeditor_uploader.fields.RichTextUploadingField()),
                ('type', models.CharField(choices=[('mcq', 'Single Correct Choice'), ('mcc', 'Multiple Correct Choices'), ('integer', 'Answer in Integer'), ('paragraph', 'Paragraph Type'), ('match', 'Matching Type')], max_length=24)),
                ('points', models.FloatField(default=4.0)),
                ('negative_point', models.FloatField(default=0)),
                ('right_answer', models.CharField(blank=True, max_length=10, null=True)),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date_time', models.DateTimeField(default=django.utils.timezone.now, null=True, verbose_name='Start Date and Time of the quiz')),
                ('end_date_time', models.DateTimeField(default=datetime.datetime(2198, 12, 31, 18, 7, tzinfo=utc), null=True, verbose_name='End Date and Time of the quiz')),
                ('instructions', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True)),
                ('duration', models.IntegerField(default=180, verbose_name='Duration of quiz in minutes')),
                ('active', models.BooleanField(default=False)),
                ('description', models.CharField(max_length=256)),
                ('is_trial', models.BooleanField(default=False)),
                ('view_answerpaper', models.BooleanField(default=False, verbose_name='Allow student to view their answer                                            paper')),
            ],
            options={
                'verbose_name_plural': 'Quizzes',
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='VideoRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('video_record_type', models.CharField(choices=[('webcam', 'Webcam'), ('screen', 'Screen Recording')], max_length=20)),
                ('record_id', models.CharField(blank=True, max_length=50, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('rec_file_name', models.CharField(blank=True, max_length=50, null=True)),
                ('answer_paper', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Uscholar.AnswerPaper')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionPaper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_marks', models.FloatField(blank=True, default=0.0)),
                ('total_questions', models.IntegerField(blank=True, default=0)),
                ('fixed_questions', models.ManyToManyField(to='Uscholar.Question')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Uscholar.Quiz')),
            ],
        ),
        migrations.AddField(
            model_name='question',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Uscholar.Subject'),
        ),
        migrations.AddField(
            model_name='question',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='question',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pwd', models.CharField(max_length=25)),
                ('picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/%Y-%m-%d/', verbose_name='Profile picture')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='Unicorn.Student')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='answerpaper',
            name='question_paper',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Uscholar.QuestionPaper'),
        ),
        migrations.AddField(
            model_name='answerpaper',
            name='questions',
            field=models.ManyToManyField(related_name='questions', to='Uscholar.Question'),
        ),
        migrations.AddField(
            model_name='answerpaper',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Uscholar.Question'),
        ),
    ]
