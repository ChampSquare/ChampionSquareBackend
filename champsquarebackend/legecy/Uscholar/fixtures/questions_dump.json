[
  {
    "snippet": "#!/bin/bash", 
    "testcase": [
      {
        "test_case_args": "file1.csv   file2.csv   file3.csv", 
        "test_case_type": "standardtestcase", 
        "weight": 1.0, 
        "test_case": "#!/bin/bash\r\ncat $1 | cut -d: -f2 | paste -d: $3 - $2"
      }
    ], 
    "points": 2.0, 
    "description": "Write a bash script that takes exactly three file arguments.\r\n\r\nThe first argument <b>(file1.csv)</b> would have 3 columns, the second argument <b>(file2.csv)</b> would have 2 columns. The third argument <b>(file3.csv) </b>would have 2 columns.\r\n<br><br>\r\nAll files have columns delimited by <b>: (colon)</b>.\r\n<br><br>\r\nWe need the <b>2nd column</b> from <b>file1.csv</b> to be removed and concatenated <b>BEFORE file2.csv</b> and this concatenated file should come <b>BESIDE file3.csv</b>.\r\n\r\nLeft is <b>file3.csv</b>, and the <b>LATER</b> columns come from <b>file1.csv and file2.csv.</b>\r\n<br><br>\r\n<b>The delimiter while putting the files BESIDE each other should again be : (colon)</b>\r\n<br><br>\r\n<b>Note:</b> - Do not hard-code the filenames. They will be passed in as arguments.\r\nAssume no headers (to avoid header-non-repetition issues).\r\n<br><br>", 
    "language": "bash", 
    "active": true, 
    "type": "code", 
    "files": [
      [
        "file1.csv", 
        false
      ], 
      [
        "file2.csv", 
        false
      ], 
      [
        "file3.csv", 
        false
      ]
    ], 
    "summary": "Yaksh Demo Question"
  }, 
  {
    "snippet": "", 
    "testcase": [
      {
        "test_case_args": "", 
        "test_case_type": "standardtestcase", 
        "weight": 1.0, 
        "test_case": "#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nextern int add(int, int, int);\r\n\r\ntemplate <class T>\r\nvoid check(T expect,T result)\r\n{\r\n    if (expect == result)\r\n    {\r\n\tprintf(\"\\nCorrect:\\n Expected %d got %d \\n\",expect,result);\r\n    }\r\n    else \r\n    {\r\n\tprintf(\"\\nIncorrect:\\n Expected %d got %d \\n\",expect,result);\r\n\texit (1);\r\n   }\r\n}\r\n\r\nint main(void)\r\n{\r\n\tint result;\r\n\tresult = add(0,0,0);\r\n        printf(\"Input submitted to the function: 0, 0, 0\");\r\n\tcheck(0, result);\r\n\tresult = add(2,3,3);\r\n        printf(\"Input submitted to the function: 2, 3, 3\");\r\n\tcheck(8,result);\r\n\tprintf(\"All Correct\\n\");\r\n}"
      }
    ], 
    "points": 2.0, 
    "description": "Write a program to add 3 nos. \r\n<br>\r\nFunction Name is <b>add</b>\r\n<br>\r\n<br><br>\r\nNote: You do not have to print anything, neither you have to make the function call. Just define the function to perform the required operation, return the output & click on check answer. Also, note that the function name should exactly be as mentioned above.", 
    "language": "c", 
    "active": true, 
    "type": "code", 
    "files": [], 
    "summary": "Yaksh Demo Question"
  }, 
  {
    "snippet": "", 
    "testcase": [
      {
        "test_case_args": "", 
        "test_case_type": "standardtestcase", 
        "weight": 1.0, 
        "test_case": "assert is_palindrome(\"hello\") == False"
      }, 
      {
        "test_case_args": "", 
        "test_case_type": "standardtestcase", 
        "weight": 1.0, 
        "test_case": "assert is_palindrome(\"nitin\") == True"
      }, 
      {
        "test_case_args": "", 
        "test_case_type": "standardtestcase", 
        "weight": 1.0, 
        "test_case": "assert is_palindrome(\"madam\") == True"
      }
    ], 
    "points": 2.0, 
    "description": "Write a function <code>is_palindrome(arg)</code> which will take one string argument.\r\n<br>\r\nReturn True if the argument is palindrome & False otherwise.\r\n<br><br>\r\nFor Example:<br><code>is_palindrome(\"Hello\")</code> should return <code>False</code><br>", 
    "language": "python", 
    "active": true, 
    "type": "code", 
    "files": [], 
    "summary": "Yaksh Demo Question"
  }
]